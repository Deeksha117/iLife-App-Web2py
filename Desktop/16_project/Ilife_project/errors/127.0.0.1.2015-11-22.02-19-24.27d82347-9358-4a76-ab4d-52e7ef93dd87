(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> "
p3
sS'layer'
p4
S'/home/deeksha/web2py/applications/Ilife_project/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    #response.flash = T(session.xyz)\n    if auth.is_logged_in():\n        redirect(URL(\'afterlogin_index\'))\n    return dict(message=T(\'Welcome to ! Life!\'))\n\n@auth.requires_login()\ndef afterlogin_index():\n    db.journal_entry.user_name.writable=False\n    db.journal_entry.user_name.readable=False\n    db.journal_entry.user_name.default=auth.user.email\n    db.life_event.user_name.default=auth.user.email\n    db.profile_pic.user_name.default=auth.user.email\n    form = SQLFORM(db.journal_entry).process()\n    form.vars.people=[\'\',\'\']\n    eventform = SQLFORM(db.life_event).process()\n    # t =  db(db.profile_pic.user_name==auth.user.email).select()\n    picform=SQLFORM(db.profile_pic)\n    if picform.process(dbio=False, onvalidation=onvalidation_insert_or_update).accepted:\n        pass\n\n    profile_pic = db(db.profile_pic.user_name == auth.user.email).select(db.profile_pic.ALL).first()\n   # if picform.accepted:\n    #    response.flash = T(str(picform.vars.prof_photo))\n     #   t =  db(db.profile_pic.user_name==auth.user.email).select()\n      #  t.prof_photo= picform.vars.prof_photo\n        #db(db.profile_pic.user_name==auth.user.email).update(prof_photo=picform.vars.prof_photo)\n    if len(request.args)>0:\n            response.flash = T(request.args[0])\n       # db(db.profile_pic.user_name==auth.user.email).update(prof_photo=picform.vars.prof_photo) or db.profile_pic.insert(user_name=auth.user.email,prof_photo=picform.vars.prof_photo)\n\n    db.journal_entry.picture.readable=False\n    db.journal_entry.contents.readable=False\n    db.journal_entry.video.readable=False\n    db.journal_entry.id.readable=False\n    db.journal_entry.mood.readable=False\n    default_sort_order=[~db.journal_entry.dated]\n\n    headers = {\'journal_entry.title\' : \'Journal Title\' ,\n               \'journal_entry.people\' : \'People Tagged\',\n              \'journal_entry.dated\' : \'Date\'}\n\n    query= db.journal_entry.user_name==auth.user.email\n\n    eventrow = db(db.life_event.user_name==auth.user.email).select(orderby=~db.life_event.dated)\n    for r in eventrow:\n        import datetime\n        if r.dated<request.now and r.reminder==True:\n            db(db.life_event.id==r.id).update(dated=r.dated+datetime.timedelta(days=366))\n            db(db.life_event.id==r.id).update(status=\'pending\')\n            response.flash = \'record updated\'\n        elif r.dated<request.now and r.reminder==False:\n            db(db.life_event.id==r.id).delete()\n        elif r.dated>request.now and r.dated<=(request.now+datetime.timedelta(days=1)) and r.status==\'pending\':\n            mail.send(to=[r.user_name],subject=\'!Life Event Reminder\',message=\'Hello\'+db.auth.user.first_name+"!\\n\\nYou have"+r.title+\' today\')\n            db(db.life_event.id==r.id).update(status=\'done\')\n            response.flash = T(\'Mail reminder sent\')\n    eventrow=eventrow[:5]\n\n\n\n    #erows= SQLFORM.grid(db.life_event.user_name==auth.user.email,create=False, deletable=False,paginate=4)\n    if \'updateve\' in request.args:\n    #if session.vars==\'updateve\':\n        rows=SQLFORM.grid(db.life_event.user_name==auth.user.email,orderby=[~db.life_event.dated],\n                        create=False,paginate=7)\n        session.vars=\'False\'\n    else:\n        rows = SQLFORM.grid(query,headers=headers,orderby=default_sort_order,\n                        create=False, deletable=False,paginate=7)\n    return locals()\n\ndef onvalidation_insert_or_update(form):\n    row = db(db.profile_pic.user_name == auth.user.email).select(db.profile_pic.ALL).first()\n    if row is not None:\n        id = row.id\n        db(db.profile_pic.id == id).update(prof_photo=form.vars.prof_photo)\n        session.flash = \'Record updated\'\n    else:\n        id = db.profile_pic.insert(**form.vars)\n        session.flash = \'Record inserted\'\n    db.commit()\n    session.flash = \'Record inserted\'\n    return\n\ndef timeline():\n    form = SQLFORM.factory(Field("Title"),Field("Date", "date"),\n                      Field("People"),formstyle=\'bootstrap\', submit_button="Search")\n    titled= ""\n    subtitle=""\n    if \'myday\' in request.args:\n        import random\n        moodings=[\'Happy\', \'Working\',\'Bored\',\'Loved\',\'Stupid\',\'Sad\',\'Hurted\',\'Cute\']\n        md=random.choice(list(moodings))\n        titled= "Your "+md+" moments!"\n        subtitle="From Team iLife.. Have a nice day!"\n        query = db.journal_entry.user_name==auth.user.email\n        query &= db.journal_entry.mood == md\n\n    else:\n        query = db.journal_entry.user_name==auth.user.email\n  # response.flash = T("hello"+rows[2].picture)\n    rows = db(query).select(orderby=~db.journal_entry.dated)\n    if form.process().accepted:\n            # gathering form submitted values\n            ttl = form.vars.Title\n            date = form.vars.Date\n            ppls = form.vars.People\n\n            # more dynamic conditions in to query\n            if ttl:\n                query &= db.journal_entry.title.contains(ttl)\n            if date:\n                query &= db.journal_entry.dated <= date\n            if ppls:\n                # A simple text search with %like%\n                query &= db.journal_entry.people.contains(ppls)\n\n    count = db(query).count()\n    return locals()\n\ndef updateevent():\n    rows1 = SQLFORM.grid(db.life_event.user_name==auth.user.email,orderby=[~db.life_event.dated],\n                        create=False,paginate=10)\n    return locals()\n\ndef user():\n\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(afterlogin_index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/deeksha/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/deeksha/web2py/applications/Ilife_project/controllers/default.py", line 160, in <module>\n  File "/home/deeksha/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/deeksha/web2py/gluon/tools.py", line 3774, in f\n    return action(*a, **b)\n  File "/home/deeksha/web2py/applications/Ilife_project/controllers/default.py", line 65, in afterlogin_index\n    mail.send(to=[r.user_name],subject=\'!Life Event Reminder\',message=\'Hello\'+db.auth.user.first_name+"!\\n\\nYou have"+r.title+\' today\')\n  File "/home/deeksha/web2py/gluon/packages/dal/pydal/base.py", line 906, in __getattr__\n    return super(DAL, self).__getattr__(key)\n  File "/home/deeksha/web2py/gluon/packages/dal/pydal/helpers/classes.py", line 30, in __getattr__\n    raise AttributeError\nAttributeError\n'
p11
s.